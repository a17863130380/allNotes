一.介绍：
免费，开源的分布式版本控制系统
    1.版本控制介绍
        能记录文件修改的历史记录，方便切换。
        分布式版本控制，集中式版本控制区别
        集中式版本控制工具：例如SVN。有一个单一的集中管理服务器，大家从服务器下载代码修改提交。
        分布式版本控制工具：例如Git。有个远程库。每个人都在本地库修改。每个客户端保存的都是整个的完整项目
    2.Git工作机制
         工作区 ->（git add）  暂存区 ->（git commit）  本地库  到了这就会生成历史版本。

         git和代码托管中心
         远程代码仓库（eg：github，gitlab，gitee码云），从本地库推送代码到远程库。远程库会保存最新版本代码。
    3.Git常用命令
        git config --global user.name 用户名     设置用户签名
        git config --global user.email 邮箱      设置用户签名
        git init                                初始化本地库
        git status                              查看本地库状态
        git add 文件名                           添加到暂存区
        git commit -m "日志信息" 文件名           提交到本地库
        git reflog                              查看历史记录  git log 查看详细记录
        git reset --hard 版本号                  版本穿梭
        （windows中换行符CRLF，Linux中是LF）
        用户签名的作用是区分不同操作者身份的，在版本的提交信息中能够看到，用来确认本次提交是谁做的。与github无关的
        初始化本地库：生成一个本地库
    4.Git分支
        在版本控制过程中，同时推进多个任务，每个任务，我们就创建每个任务的单独分支。使用分支意味着程序员你可以把自己的
        工作从开发主线上分离开来，开发自己分支的实收，不会影响主线分支的运行。对于初学者来说，分支可以简单理解为副本，
        一个分支就是一个单独的副本。
        分支可以并行推进多个功能的开发。

        git branch   查看分支  加上 -v查看一些版本信息
        git branch 分支名   创建分支
        git checkout 分支名  切换分支
        git merge 分支名  指定分支合并到当前分支上
        合并代码冲突。不同分支在同一文件做了不同修改，合并时候需要人为决定修改内容。
    5.Git团队协作机制
        团队内协作、跨团队协作。
    6.GtiHub操作
        git remote 查看当前所有远程地址别名 加上-v显示一些详细信息
        git remote add 别名 远程地址   创建远程仓库别名
        git push 别名（也能直接放链接在这，但是不方便） 分支  推送指定分支到远程仓库  不加分支会
        git pull 别名 分支 从远程仓库拉取制定分支到当前分支
        git clone 远程地址   会拉取代码，初始化本地仓库，还会创建一个远程仓库的默认别名 origin

        团队内协作，需要仓库的主人邀请人加入仓库。在github仓库页面，点击setting里的一个选项加。
        团队间就多一个fork，pull request
    7.Idea中使用Git
        Idea中先设置git，再设置github账号，然后使用Idea中的git就行了。本地和远程版本不一样时，会导致提交问题。
        所以改之前先pull，然后push。
    8.GitLab
        得先安装服务器，例如用CentOS7以上版本的服务器。服务器得能上网。在服务器上安装GitLab，并将服务初始化以及启用。
    9.Idea中用gitee，gitlab都要额外的装插件才可以。

